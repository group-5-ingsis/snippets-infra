services:

  certbot:
    image: certbot/certbot
    container_name: certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${CERTBOT_EMAIL} -d ${CERTBOT_DOMAIN} --agree-tos
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

  nginx:
    image: nginx:latest
    container_name: "nginx"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped

  parse:
    image: ghcr.io/group-5-ingsis/parse:latest-dev
    container_name: "parse"
    ports:
      - ${PARSE_APP_PORT}
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      SERVER_PORT: ${PARSE_SERVER_PORT}
      STREAM_KEY_FORMAT: ${STREAM_KEY_FORMAT}
      STREAM_KEY_VALIDATE: ${STREAM_KEY_VALIDATE}
      GROUP_ID: ${GROUP_ID}
      ASSET_SERVICE_URL: ${ASSET_SERVICE_URL}
      REDIS_HOST: redis
    restart: unless-stopped
    depends_on:
      - redis

  snippets:
    image: ghcr.io/group-5-ingsis/snippets:latest-dev
    container_name: "snippets"
    ports:
      - ${SNIPPETS_APP_PORT}
    environment:
      M_CLIENT_ID: ${M_CLIENT_ID}
      M_CLIENT_SECRET: ${M_CLIENT_SECRET}
      MANAGEMENT_API_IDENTIFIER: ${MANAGEMENT_API_IDENTIFIER}
      STREAM_KEY_TEST: ${STREAM_KEY_TEST}
      STREAM_KEY_TEST_CREATE: ${STREAM_KEY_TEST_CREATE}
      STREAM_KEY_TEST_RESULT: ${STREAM_KEY_TEST_RESULT}
      GROUP_ID_TEST_RES: ${GROUP_ID_TEST_RES}
      PERMISSION_SERVICE_URL: ${PERMISSION_SERVICE_URL}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      SPRING_DATASOURCE_URL: ${SNIPPETS_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SNIPPETS_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${SNIPPETS_DB_PASSWORD}
      SERVER_PORT: ${SNIPPETS_SERVER_PORT}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH_SERVER_URI: ${AUTH_SERVER_URI}
      AUTH_CLIENT_ID: ${AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      STREAM_KEY_FORMAT: ${STREAM_KEY_FORMAT}
      GROUP_ID: ${GROUP_ID}
      ASSET_SERVICE_URL: ${ASSET_SERVICE_URL}
      REDIS_HOST: redis
    depends_on:
      - db-snippets
      - redis
    restart: unless-stopped

  db-snippets:
    image: postgres:13
    container_name: "db-snippets"
    environment:
      POSTGRES_USER: ${SNIPPETS_DB_USER}
      POSTGRES_PASSWORD: ${SNIPPETS_DB_PASSWORD}
      POSTGRES_DB: ${SNIPPETS_DB_NAME}
    ports:
      - ${SNIPPETS_DB_PORT}
    volumes:
      - db-snippets-data:/var/lib/postgresql/data
    restart: unless-stopped

  permission:
    image: ghcr.io/group-5-ingsis/permission:latest-dev
    container_name: "permission"
    ports:
      - ${PERMISSION_APP_PORT}
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      SPRING_DATASOURCE_URL: ${PERMISSION_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${PERMISSION_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${PERMISSION_DB_PASSWORD}
      SERVER_PORT: ${PERMISSION_SERVER_PORT}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH_SERVER_URI: ${AUTH_SERVER_URI}
      AUTH_CLIENT_ID: ${AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      ASSET_SERVICE_URL: ${ASSET_SERVICE_URL}
      REDIS_HOST: redis
    depends_on:
      - db-permission
    restart: unless-stopped

  db-permission:
    image: postgres:13
    container_name: "db-permission"
    environment:
      POSTGRES_USER: ${PERMISSION_DB_USER}
      POSTGRES_PASSWORD: ${PERMISSION_DB_PASSWORD}
      POSTGRES_DB: ${PERMISSION_DB_NAME}
    ports:
      - ${PERMISSION_DB_PORT}
    volumes:
      - db-permission-data:/var/lib/postgresql/data
    restart: unless-stopped

  asset-service:
    container_name: "asset_service"
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    ports:
      - "8080:8080"
    environment:
      AZURE_HOST: "http://azurite"
      NEW_RELIC_APP_NAME: "asset-service"
      NEW_RELIC_AGENT_ENABLED: false
    restart: unless-stopped

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob:/workspace

  redis:
    container_name: "event-bus"
    image: redis:6-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    hostname: redis

  printscript-ui:
    container_name: "printscript-ui"
    image: ghcr.io/group-5-ingsis/printscript-ui:latest-dev
    restart: unless-stopped
    ports:
      - "5173:80"


  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      SUBDOMAINS: "snippetsearcher-group5"
      TOKEN: ${DUCK_TOKEN}
    restart: unless-stopped

  test:
    image: ghcr.io/group-5-ingsis/test:latest-dev
    container_name: "test"
    restart: unless-stopped
    environment:
      STREAM_KEY_TEST: ${STREAM_KEY_TEST}
      STREAM_KEY_TEST_CREATE: ${STREAM_KEY_TEST_CREATE}
      STREAM_KEY_TEST_RESULT: ${STREAM_KEY_TEST_RESULT}
      GROUP_KEY_TEST: ${GROUP_KEY_TEST}
      GROUP_KEY_TEST_CREATE: ${GROUP_KEY_TEST_CREATE}
      REDIS_HOST: redis
      SERVER_PORT: ${TEST_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${TEST_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${TEST_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${TEST_DB_PASSWORD}
      ASSET_SERVICE_URL: ${ASSET_SERVICE_URL}
    ports:
      - ${TEST_APP_PORT}
    depends_on:
      - db-test
      - redis

  db-test:
    image: postgres:13
    container_name: "db-test"
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
      POSTGRES_DB: ${TEST_DB_NAME}
    ports:
      - ${TEST_DB_PORT}
    volumes:
      - db-test-data:/var/lib/postgresql/data
    restart: unless-stopped


volumes:
  db-snippets-data:
  db-permission-data:
  db-test-data:
  blob:
    external: false